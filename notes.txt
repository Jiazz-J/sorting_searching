Built in array can be used as stack
push and pop
unshift and shift -- there is no real benifit in using this approach


Queues-- FIFO
SHIFT and PUSH -- assume


HashTable
    -- Add a hash function by which the output is always deterministic

    We can use arrays

        Handling Collisions
            Seperate chaining -- store the values in the nested structure 
            Linear probing -- find the next empty spot and insert the element
    


To reverse an array 
    [].slice().reverse()




Dijkstra's algorithm:

// Restore the shortest paths
// Shortest distance between source, destination and all others.
    Pick the starting node
      Initialize a Travelled map with all vertices with null values
      Initialize a distance map and all the vertices as keys and infinity as values except for starting node
        Pick the vertex with shortest value and calculate distance between its neighbours and do a comparision and update
        those values in the distance map and update the Travelled map with how we get there

        Add that vertex to visited array

        Again pick a unvisited vertex with lowest value 
        
      calculate distance between its neighbours
        save them in a data structure




{
  "watch": [
    "src"
  ],
  "ext": ".ts,.js",
  "ignore": [],
 // "exec": "ts-node ./src/priority-queue/priority-queue.ts"

  "exec":./src/hash-set/hash-table.js
}